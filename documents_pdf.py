from flask import Blueprint, request, jsonify, make_response
from flask_cors import cross_origin
import io
from datetime import datetime
import os

documents_bp = Blueprint('documents', __name__)

def create_pdf_content_with_watermark(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ PDF –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º –∏—Å–ø–æ–ª—å–∑—É—è WeasyPrint"""
    try:
        from weasyprint import HTML, CSS
        from weasyprint.text.fonts import FontConfiguration
    except ImportError:
        # Fallback –∫ HTML –µ—Å–ª–∏ WeasyPrint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return create_html_content(data)
    
    document_type = data.get('type')
    form_data = data.get('formData', {})
    items = data.get('items', [])
    
    if document_type == 'pricelist':
        title = "–ü–†–ê–ô–°-–õ–ò–°–¢"
        company_info = f"<h2>{form_data.get('companyName', '–ö–æ–º–ø–∞–Ω–∏—è')}</h2>"
    elif document_type == 'invoice':
        title = f"–°–ß–ï–¢ –ù–ê –û–ü–õ–ê–¢–£ ‚Ññ {form_data.get('invoiceNumber', '001')}"
        company_info = f"<h2>{form_data.get('companyName', '–ö–æ–º–ø–∞–Ω–∏—è')}</h2>"
    elif document_type == 'contract':
        title = f"–î–û–ì–û–í–û–† ‚Ññ {form_data.get('contractNumber', '001')}"
        company_info = f"<h2>{form_data.get('companyName', '–ö–æ–º–ø–∞–Ω–∏—è')}</h2>"
    else:
        title = "–î–û–ö–£–ú–ï–ù–¢"
        company_info = "<h2>–ö–æ–º–ø–∞–Ω–∏—è</h2>"
    
    # CSS —Å—Ç–∏–ª–∏ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º
    css_content = """
    @page {
        size: A4;
        margin: 2cm;
        @bottom-left {
            content: "–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é DocuFlow";
            font-size: 8pt;
            color: #888;
        }
    }
    
    body {
        font-family: 'DejaVu Sans', Arial, sans-serif;
        margin: 0;
        padding: 20px;
        position: relative;
    }
    
    .watermark {
        position: fixed;
        bottom: 20px;
        left: 20px;
        font-size: 10px;
        color: #ccc;
        z-index: 1000;
        background: rgba(255, 255, 255, 0.8);
        padding: 5px 10px;
        border-radius: 3px;
        border: 1px solid #eee;
    }
    
    h1 {
        text-align: center;
        color: #333;
        margin-bottom: 30px;
    }
    
    h2 {
        color: #555;
        margin-bottom: 20px;
    }
    
    table {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
    }
    
    th, td {
        border: 1px solid #ddd;
        padding: 12px 8px;
        text-align: left;
    }
    
    th {
        background-color: #f8f9fa;
        font-weight: bold;
    }
    
    .total-row {
        background-color: #f0f8ff;
        font-weight: bold;
    }
    
    .company-info {
        margin-bottom: 30px;
        padding: 15px;
        background-color: #f9f9f9;
        border-radius: 5px;
    }
    
    .document-footer {
        margin-top: 40px;
        text-align: center;
        font-size: 12px;
        color: #666;
    }
    """
    
    # HTML –∫–æ–Ω—Ç–µ–Ω—Ç
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>{title}</title>
    </head>
    <body>
        <div class="watermark">üîí DocuFlow Free</div>
        
        <h1>{title}</h1>
        
        <div class="company-info">
            {company_info}
            <p><strong>–î–∞—Ç–∞:</strong> {datetime.now().strftime('%d.%m.%Y')}</p>
            {f'<p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {form_data.get("phone", "")}</p>' if form_data.get("phone") else ''}
            {f'<p><strong>Email:</strong> {form_data.get("email", "")}</p>' if form_data.get("email") else ''}
            {f'<p><strong>–ê–¥—Ä–µ—Å:</strong> {form_data.get("address", "")}</p>' if form_data.get("address") else ''}
        </div>
        
        <h3>–¢–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏:</h3>
        <table>
            <thead>
                <tr>
                    <th style="width: 5%;">‚Ññ</th>
                    <th style="width: 40%;">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                    <th style="width: 15%;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                    <th style="width: 20%;">–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É</th>
                    <th style="width: 20%;">–°—É–º–º–∞</th>
                </tr>
            </thead>
            <tbody>
    """
    
    total = 0
    for i, item in enumerate(items, 1):
        item_total = item.get('quantity', 1) * item.get('price', 0)
        total += item_total
        html_content += f"""
                <tr>
                    <td>{i}</td>
                    <td>{item.get('name', '')}</td>
                    <td>{item.get('quantity', 1)}</td>
                    <td>{item.get('price', 0):.2f}</td>
                    <td>{item_total:.2f}</td>
                </tr>
        """
    
    html_content += f"""
            </tbody>
            <tfoot>
                <tr class="total-row">
                    <td colspan="4"><strong>–ò–¢–û–ì–û:</strong></td>
                    <td><strong>{total:.2f} {form_data.get('currency', 'RUB')}</strong></td>
                </tr>
            </tfoot>
        </table>
        
        <div class="document-footer">
            <p>–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é DocuFlow - {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
            <p>–î–ª—è —Å–Ω—è—Ç–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π - –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω</p>
        </div>
    </body>
    </html>
    """
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å PDF —Å –ø–æ–º–æ—â—å—é WeasyPrint
        font_config = FontConfiguration()
        html_doc = HTML(string=html_content)
        css_doc = CSS(string=css_content, font_config=font_config)
        
        pdf_bytes = html_doc.write_pdf(stylesheets=[css_doc], font_config=font_config)
        return pdf_bytes, 'application/pdf'
        
    except Exception as e:
        print(f"WeasyPrint error: {e}")
        # Fallback –∫ HTML
        return html_content, 'text/html'

def create_html_content(data):
    """Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    document_type = data.get('type')
    form_data = data.get('formData', {})
    items = data.get('items', [])
    
    if document_type == 'pricelist':
        title = "–ü–†–ê–ô–°-–õ–ò–°–¢"
    elif document_type == 'invoice':
        title = f"–°–ß–ï–¢ –ù–ê –û–ü–õ–ê–¢–£ ‚Ññ {form_data.get('invoiceNumber', '001')}"
    elif document_type == 'contract':
        title = f"–î–û–ì–û–í–û–† ‚Ññ {form_data.get('contractNumber', '001')}"
    else:
        title = "–î–û–ö–£–ú–ï–ù–¢"
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>{title}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; position: relative; }}
            .watermark {{ position: fixed; bottom: 20px; left: 20px; font-size: 12px; color: #ccc; background: rgba(255,255,255,0.8); padding: 5px; border: 1px solid #eee; }}
            h1 {{ text-align: center; }}
            table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            th {{ background-color: #f2f2f2; }}
        </style>
    </head>
    <body>
        <div class="watermark">üîí DocuFlow Free</div>
        <h1>{title}</h1>
        <h2>{form_data.get('companyName', '–ö–æ–º–ø–∞–Ω–∏—è')}</h2>
        <p>–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}</p>
        
        <h3>–¢–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏:</h3>
        <table>
            <tr><th>‚Ññ</th><th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–¶–µ–Ω–∞</th><th>–°—É–º–º–∞</th></tr>
    """
    
    total = 0
    for i, item in enumerate(items, 1):
        item_total = item.get('quantity', 1) * item.get('price', 0)
        total += item_total
        html_content += f"""
            <tr>
                <td>{i}</td>
                <td>{item.get('name', '')}</td>
                <td>{item.get('quantity', 1)}</td>
                <td>{item.get('price', 0):.2f}</td>
                <td>{item_total:.2f}</td>
            </tr>
        """
    
    html_content += f"""
            <tr style="font-weight: bold;">
                <td colspan="4">–ò–¢–û–ì–û:</td>
                <td>{total:.2f} {form_data.get('currency', 'RUB')}</td>
            </tr>
        </table>
        <p><em>–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é DocuFlow - {datetime.now().strftime('%d.%m.%Y %H:%M')}</em></p>
    </body>
    </html>
    """
    
    return html_content

@documents_bp.route('/generate', methods=['POST'])
@cross_origin()
def generate_document():
    """API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'}), 400
        
        # –°–æ–∑–¥–∞–µ–º PDF –∏–ª–∏ HTML –∫–æ–Ω—Ç–µ–Ω—Ç
        content, content_type = create_pdf_content_with_watermark(data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_extension = 'pdf' if content_type == 'application/pdf' else 'html'
        filename = f"document_{data.get('type', 'unknown')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{file_extension}"
        
        response = make_response(content)
        response.headers['Content-Type'] = content_type
        response.headers['Content-Disposition'] = f'attachment; filename="{filename}"'
        
        return response
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}'}), 500

@documents_bp.route('/preview', methods=['POST', 'GET'])
@cross_origin()
def preview_document():
    """API endpoint –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        if request.method == 'GET':
            return jsonify({'message': 'Preview endpoint is working', 'method': 'GET'})
            
        data = request.get_json()
        
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'}), 400
        
        # –°–æ–∑–¥–∞–µ–º HTML –ø—Ä–µ–≤—å—é
        html_content = create_html_content(data)
        
        return jsonify({
            'success': True,
            'message': '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≥–æ—Ç–æ–≤',
            'type': data.get('type'),
            'items_count': len(data.get('items', [])),
            'total': data.get('total', 0),
            'preview_html': html_content
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}'}), 500

