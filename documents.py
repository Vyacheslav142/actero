from flask import Blueprint, request, jsonify, send_file
from flask_cors import cross_origin
import io
import os
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

documents_bp = Blueprint('documents', __name__)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
try:
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è Linux
    pdfmetrics.registerFont(TTFont('DejaVuSans', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf'))
    pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', '/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf'))
except:
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è Windows
        import os
        windows_fonts = [
            'C:/Windows/Fonts/arial.ttf',
            'C:/Windows/Fonts/calibri.ttf',
            'C:/Windows/Fonts/tahoma.ttf'
        ]
        for font_path in windows_fonts:
            if os.path.exists(font_path):
                pdfmetrics.registerFont(TTFont('Arial', font_path))
                pdfmetrics.registerFont(TTFont('Arial-Bold', font_path))
                break
    except:
        # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
        pass

def create_styles():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    styles = getSampleStyleSheet()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
    available_fonts = pdfmetrics.getRegisteredFontNames()
    
    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    if 'Arial' in available_fonts:
        font_name = 'Arial'
        bold_font_name = 'Arial-Bold'
    elif 'DejaVuSans' in available_fonts:
        font_name = 'DejaVuSans'
        bold_font_name = 'DejaVuSans-Bold'
    else:
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        font_name = 'Helvetica'
        bold_font_name = 'Helvetica-Bold'
    
    # –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    title_style = ParagraphStyle(
        'DocumentTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=40,
        alignment=1,  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        fontName=bold_font_name,
        textColor=colors.HexColor('#2c3e50')
    )
    
    # –°—Ç–∏–ª—å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    company_style = ParagraphStyle(
        'CompanyName',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=15,
        alignment=1,
        fontName=bold_font_name,
        textColor=colors.HexColor('#34495e')
    )
    
    # –°—Ç–∏–ª—å –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    normal_style = ParagraphStyle(
        'NormalText',
        parent=styles['Normal'],
        fontSize=11,
        fontName=font_name,
        textColor=colors.HexColor('#2c3e50'),
        leading=14
    )
    
    # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    heading_style = ParagraphStyle(
        'SectionHeading',
        parent=styles['Heading2'],
        fontSize=13,
        spaceAfter=15,
        spaceBefore=20,
        fontName=bold_font_name,
        textColor=colors.HexColor('#34495e')
    )
    
    # –°—Ç–∏–ª—å –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    contact_style = ParagraphStyle(
        'ContactInfo',
        parent=styles['Normal'],
        fontSize=10,
        fontName=font_name,
        textColor=colors.HexColor('#7f8c8d'),
        alignment=1,
        leading=12
    )
    
    # –°—Ç–∏–ª—å –¥–ª—è –¥–∞—Ç—ã
    date_style = ParagraphStyle(
        'DateStyle',
        parent=styles['Normal'],
        fontSize=10,
        fontName=font_name,
        textColor=colors.HexColor('#7f8c8d'),
        alignment=2,  # –ü–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
        leading=12
    )
    
    return {
        'title': title_style,
        'company': company_style,
        'normal': normal_style,
        'heading': heading_style,
        'contact': contact_style,
        'date': date_style
    }

def generate_pricelist_pdf(data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, 
                          rightMargin=72, leftMargin=72, 
                          topMargin=72, bottomMargin=18)
    story = []
    styles = create_styles()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    title = Paragraph("–ü–†–ê–ô–°-–õ–ò–°–¢", styles['title'])
    story.append(title)
    story.append(Spacer(1, 30))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
    if data['formData']['companyName']:
        company_info = Paragraph(data['formData']['companyName'], styles['company'])
        story.append(company_info)
        story.append(Spacer(1, 20))
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ
    contact_info = []
    if data['formData']['phone']:
        contact_info.append(f"üìû {data['formData']['phone']}")
    if data['formData']['email']:
        contact_info.append(f"‚úâ {data['formData']['email']}")
    if data['formData']['address']:
        contact_info.append(f"üìç {data['formData']['address']}")
    
    if contact_info:
        contact_text = Paragraph("<br/>".join(contact_info), styles['contact'])
        story.append(contact_text)
        story.append(Spacer(1, 30))
    
    # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø—Ä–∞–≤–∞
    date_text = Paragraph(f"–î–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y')}", styles['date'])
    story.append(date_text)
    story.append(Spacer(1, 30))
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
    if data['items']:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        table_header = Paragraph("–¢–û–í–ê–†–´ –ò –£–°–õ–£–ì–ò", styles['heading'])
        story.append(table_header)
        story.append(Spacer(1, 15))
        
        table_data = [['‚Ññ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ï–¥.–∏–∑–º.', '–¶–µ–Ω–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è']]
        
        for i, item in enumerate(data['items'], 1):
            table_data.append([
                str(i),
                item['name'] or '',
                item['description'] or '',
                item['unit'] or '',
                f"{item['price']:.2f} {data['formData']['currency']}",
                item['category'] or ''
            ])
        
        table = Table(table_data, colWidths=[0.5*inch, 2*inch, 2*inch, 0.8*inch, 1*inch, 1.2*inch])
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        available_fonts = pdfmetrics.getRegisteredFontNames()
        if 'Arial' in available_fonts:
            table_font = 'Arial'
            table_bold_font = 'Arial-Bold'
        elif 'DejaVuSans' in available_fonts:
            table_font = 'DejaVuSans'
            table_bold_font = 'DejaVuSans-Bold'
        else:
            table_font = 'Helvetica'
            table_bold_font = 'Helvetica-Bold'
        
        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã
        table.setStyle(TableStyle([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#34495e')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), table_bold_font),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('TOPPADDING', (0, 0), (-1, 0), 12),
            
            # –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.HexColor('#2c3e50')),
            ('ALIGN', (0, 1), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 1), (-1, -1), table_font),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8f9fa')]),
            ('TOPPADDING', (0, 1), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 1), (-1, -1), 8),
            
            # –ì—Ä–∞–Ω–∏—Ü—ã
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#dee2e6')),
            ('LINEBELOW', (0, 0), (-1, 0), 2, colors.HexColor('#34495e')),
        ]))
        
        story.append(table)
        story.append(Spacer(1, 30))
    
    doc.build(story)
    buffer.seek(0)
    return buffer

def generate_invoice_pdf(data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, 
                          rightMargin=72, leftMargin=72, 
                          topMargin=72, bottomMargin=18)
    story = []
    styles = create_styles()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    title = Paragraph(f"–°–ß–ï–¢ –ù–ê –û–ü–õ–ê–¢–£ ‚Ññ {data['formData']['invoiceNumber']}", styles['title'])
    story.append(title)
    story.append(Spacer(1, 30))
    
    # –î–∞—Ç—ã
    date_info = f"–æ—Ç {data['formData']['invoiceDate']}"
    if data['formData']['paymentDue']:
        date_info += f", –∫ –æ–ø–ª–∞—Ç–µ –¥–æ {data['formData']['paymentDue']}"
    date_text = Paragraph(date_info, styles['date'])
    story.append(date_text)
    story.append(Spacer(1, 30))
    
    # –ü–æ—Å—Ç–∞–≤—â–∏–∫
    supplier_heading = Paragraph("–ü–û–°–¢–ê–í–©–ò–ö:", styles['heading'])
    story.append(supplier_heading)
    
    supplier_info = [data['formData']['companyName']]
    if data['formData']['supplierInn']:
        supplier_info.append(f"–ò–ù–ù: {data['formData']['supplierInn']}")
    if data['formData']['supplierKpp']:
        supplier_info.append(f"–ö–ü–ü: {data['formData']['supplierKpp']}")
    if data['formData']['address']:
        supplier_info.append(f"–ê–¥—Ä–µ—Å: {data['formData']['address']}")
    
    supplier_text = Paragraph("<br/>".join(supplier_info), styles['normal'])
    story.append(supplier_text)
    story.append(Spacer(1, 15))
    
    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å
    customer_heading = Paragraph("–ü–û–ö–£–ü–ê–¢–ï–õ–¨:", styles['heading'])
    story.append(customer_heading)
    
    customer_info = [data['formData']['customerName']]
    if data['formData']['customerInn']:
        customer_info.append(f"–ò–ù–ù: {data['formData']['customerInn']}")
    if data['formData']['customerKpp']:
        customer_info.append(f"–ö–ü–ü: {data['formData']['customerKpp']}")
    if data['formData']['customerAddress']:
        customer_info.append(f"–ê–¥—Ä–µ—Å: {data['formData']['customerAddress']}")
    
    customer_text = Paragraph("<br/>".join(customer_info), styles['normal'])
    story.append(customer_text)
    story.append(Spacer(1, 20))
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
    if data['items']:
        table_data = [['‚Ññ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª-–≤–æ', '–ï–¥.–∏–∑–º.', '–¶–µ–Ω–∞', '–°—É–º–º–∞']]
        total_sum = 0
        
        for i, item in enumerate(data['items'], 1):
            item_sum = item['quantity'] * item['price']
            total_sum += item_sum
            table_data.append([
                str(i),
                item['name'] or '',
                str(item['quantity']),
                item['unit'] or '',
                f"{item['price']:.2f}",
                f"{item_sum:.2f}"
            ])
        
        # –ò—Ç–æ–≥–æ
        table_data.append(['', '', '', '', '–ò–¢–û–ì–û:', f"{total_sum:.2f} {data['formData']['currency']}"])
        
        table = Table(table_data, colWidths=[0.5*inch, 2.5*inch, 0.8*inch, 0.8*inch, 1*inch, 1.2*inch])
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        available_fonts = pdfmetrics.getRegisteredFontNames()
        if 'Arial' in available_fonts:
            table_font = 'Arial'
            table_bold_font = 'Arial-Bold'
        elif 'DejaVuSans' in available_fonts:
            table_font = 'DejaVuSans'
            table_bold_font = 'DejaVuSans-Bold'
        else:
            table_font = 'Helvetica'
            table_bold_font = 'Helvetica-Bold'
        
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), table_bold_font),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -2), colors.beige),
            ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
            ('FONTNAME', (0, 1), (-1, -1), table_font),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('FONTNAME', (0, -1), (-1, -1), table_bold_font),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(table)
    
    # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    if data['formData']['supplierBankDetails']:
        story.append(Spacer(1, 20))
        bank_heading = Paragraph("–ë–ê–ù–ö–û–í–°–ö–ò–ï –†–ï–ö–í–ò–ó–ò–¢–´:", styles['heading'])
        story.append(bank_heading)
        bank_text = Paragraph(data['formData']['supplierBankDetails'].replace('\n', '<br/>'), styles['normal'])
        story.append(bank_text)
    
    doc.build(story)
    buffer.seek(0)
    return buffer

def generate_contract_pdf(data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    story = []
    styles = create_styles()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    title = Paragraph(f"–î–û–ì–û–í–û–† ‚Ññ {data['formData']['contractNumber']}", styles['title'])
    story.append(title)
    story.append(Spacer(1, 20))
    
    # –î–∞—Ç–∞ –∏ –º–µ—Å—Ç–æ
    date_place = f"{data['formData']['contractPlace'] or ''} {data['formData']['contractDate'] or ''}"
    date_text = Paragraph(date_place, styles['normal'])
    story.append(date_text)
    story.append(Spacer(1, 20))
    
    # –°—Ç–æ—Ä–æ–Ω—ã
    parties_heading = Paragraph("–°–¢–û–†–û–ù–´ –î–û–ì–û–í–û–†–ê:", styles['heading'])
    story.append(parties_heading)
    
    # –ó–∞–∫–∞–∑—á–∏–∫
    customer_text = Paragraph(f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {data['formData']['customerName']}", styles['normal'])
    story.append(customer_text)
    if data['formData']['customerRepresentative']:
        rep_text = Paragraph(f"–≤ –ª–∏—Ü–µ {data['formData']['customerRepresentative']}", styles['normal'])
        story.append(rep_text)
    story.append(Spacer(1, 10))
    
    # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    supplier_text = Paragraph(f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {data['formData']['companyName']}", styles['normal'])
    story.append(supplier_text)
    if data['formData']['supplierRepresentative']:
        rep_text = Paragraph(f"–≤ –ª–∏—Ü–µ {data['formData']['supplierRepresentative']}", styles['normal'])
        story.append(rep_text)
    story.append(Spacer(1, 20))
    
    # –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞
    if data['formData']['contractSubject']:
        subject_heading = Paragraph("–ü–†–ï–î–ú–ï–¢ –î–û–ì–û–í–û–†–ê:", styles['heading'])
        story.append(subject_heading)
        subject_text = Paragraph(data['formData']['contractSubject'], styles['normal'])
        story.append(subject_text)
        story.append(Spacer(1, 15))
    
    # –£—Å–ª–æ–≤–∏—è
    conditions = []
    if data['formData']['executionPeriod']:
        conditions.append(f"–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data['formData']['executionPeriod']}")
    if data['formData']['paymentTerms']:
        conditions.append(f"–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {data['formData']['paymentTerms']}")
    
    if conditions:
        conditions_heading = Paragraph("–£–°–õ–û–í–ò–Ø:", styles['heading'])
        story.append(conditions_heading)
        conditions_text = Paragraph("<br/>".join(conditions), styles['normal'])
        story.append(conditions_text)
        story.append(Spacer(1, 15))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if data['formData']['additionalTerms']:
        additional_heading = Paragraph("–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø:", styles['heading'])
        story.append(additional_heading)
        additional_text = Paragraph(data['formData']['additionalTerms'], styles['normal'])
        story.append(additional_text)
        story.append(Spacer(1, 20))
    
    # –ü–æ–¥–ø–∏—Å–∏
    signatures_heading = Paragraph("–ü–û–î–ü–ò–°–ò –°–¢–û–†–û–ù:", styles['heading'])
    story.append(signatures_heading)
    
    signature_table = Table([
        ['–ó–∞–∫–∞–∑—á–∏–∫:', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:'],
        ['_________________', '_________________'],
        [data['formData']['customerRepresentative'] or '', data['formData']['supplierRepresentative'] or '']
    ], colWidths=[3*inch, 3*inch])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–ø–∏—Å–µ–π
    available_fonts = pdfmetrics.getRegisteredFontNames()
    if 'Arial' in available_fonts:
        signature_font = 'Arial'
    elif 'DejaVuSans' in available_fonts:
        signature_font = 'DejaVuSans'
    else:
        signature_font = 'Helvetica'
    
    signature_table.setStyle(TableStyle([
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, -1), signature_font),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 1), (-1, 1), 20),
    ]))
    
    story.append(signature_table)
    
    doc.build(story)
    buffer.seek(0)
    return buffer

@documents_bp.route('/generate', methods=['POST'])
@cross_origin()
def generate_document():
    """API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'}), 400
        
        document_type = data.get('type')
        
        if document_type == 'pricelist':
            pdf_buffer = generate_pricelist_pdf(data)
            filename = f"pricelist_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        elif document_type == 'invoice':
            pdf_buffer = generate_invoice_pdf(data)
            filename = f"invoice_{data['formData'].get('invoiceNumber', 'unknown')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        elif document_type == 'contract':
            pdf_buffer = generate_contract_pdf(data)
            filename = f"contract_{data['formData'].get('contractNumber', 'unknown')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        else:
            return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞'}), 400
        
        return send_file(
            pdf_buffer,
            as_attachment=True,
            download_name=filename,
            mimetype='application/pdf'
        )
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}'}), 500

@documents_bp.route('/preview', methods=['POST'])
@cross_origin()
def preview_document():
    """API endpoint –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'}), 400
        
        document_type = data.get('type')
        form_data = data.get('formData', {})
        items = data.get('items', [])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        html_content = generate_preview_html(document_type, form_data, items)
        
        return jsonify({
            'success': True,
            'preview_html': html_content,
            'type': document_type,
            'items_count': len(items),
            'total': data.get('total', 0)
        })
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}'}), 500

def generate_preview_html(document_type, form_data, items):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    html = f"""
    <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 40px; background: white; border: 1px solid #dee2e6; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <div style="text-align: center; margin-bottom: 40px;">
            <h1 style="color: #2c3e50; margin: 0; font-size: 28px; font-weight: bold;">{get_document_title(document_type, form_data)}</h1>
        </div>
    """
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
    if form_data.get('companyName'):
        html += f'<div style="text-align: center; margin-bottom: 20px;"><h2 style="color: #34495e; margin: 0; font-size: 18px; font-weight: bold;">{form_data["companyName"]}</h2></div>'
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    contact_info = []
    if form_data.get('phone'):
        contact_info.append(f"üìû {form_data['phone']}")
    if form_data.get('email'):
        contact_info.append(f"‚úâ {form_data['email']}")
    if form_data.get('address'):
        contact_info.append(f"üìç {form_data['address']}")
    
    if contact_info:
        html += f'<div style="text-align: center; margin-bottom: 30px; color: #7f8c8d; font-size: 12px;">{"<br/>".join(contact_info)}</div>'
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if document_type == 'invoice':
        html += generate_invoice_preview(form_data)
    elif document_type == 'contract':
        html += generate_contract_preview(form_data)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
    if items:
        html += generate_items_table(items, document_type)
    
    html += "</div>"
    return html

def get_document_title(document_type, form_data=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    if form_data is None:
        form_data = {}
    
    titles = {
        'pricelist': '–ü–†–ê–ô–°-–õ–ò–°–¢',
        'invoice': f'–°–ß–ï–¢ –ù–ê –û–ü–õ–ê–¢–£ ‚Ññ {form_data.get("invoiceNumber", "")}',
        'contract': f'–î–û–ì–û–í–û–† ‚Ññ {form_data.get("contractNumber", "")}'
    }
    return titles.get(document_type, '–î–û–ö–£–ú–ï–ù–¢')

def generate_invoice_preview(form_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á–µ—Ç–∞"""
    html = ""
    
    if form_data.get('invoiceDate'):
        html += f'<div style="margin-bottom: 20px;">–æ—Ç {form_data["invoiceDate"]}</div>'
    
    # –ü–æ—Å—Ç–∞–≤—â–∏–∫
    html += '<div style="margin-bottom: 15px;"><strong>–ü–û–°–¢–ê–í–©–ò–ö:</strong><br/>'
    supplier_info = [form_data.get('companyName', '')]
    if form_data.get('supplierInn'):
        supplier_info.append(f"–ò–ù–ù: {form_data['supplierInn']}")
    if form_data.get('supplierKpp'):
        supplier_info.append(f"–ö–ü–ü: {form_data['supplierKpp']}")
    if form_data.get('address'):
        supplier_info.append(f"–ê–¥—Ä–µ—Å: {form_data['address']}")
    html += "<br/>".join(filter(None, supplier_info)) + '</div>'
    
    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å
    html += '<div style="margin-bottom: 20px;"><strong>–ü–û–ö–£–ü–ê–¢–ï–õ–¨:</strong><br/>'
    customer_info = [form_data.get('customerName', '')]
    if form_data.get('customerInn'):
        customer_info.append(f"–ò–ù–ù: {form_data['customerInn']}")
    if form_data.get('customerKpp'):
        customer_info.append(f"–ö–ü–ü: {form_data['customerKpp']}")
    if form_data.get('customerAddress'):
        customer_info.append(f"–ê–¥—Ä–µ—Å: {form_data['customerAddress']}")
    html += "<br/>".join(filter(None, customer_info)) + '</div>'
    
    return html

def generate_contract_preview(form_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞"""
    html = ""
    
    if form_data.get('contractDate') or form_data.get('contractPlace'):
        date_place = f"{form_data.get('contractPlace', '')} {form_data.get('contractDate', '')}"
        html += f'<div style="margin-bottom: 20px;">{date_place}</div>'
    
    # –°—Ç–æ—Ä–æ–Ω—ã –¥–æ–≥–æ–≤–æ—Ä–∞
    html += '<div style="margin-bottom: 15px;"><strong>–°–¢–û–†–û–ù–´ –î–û–ì–û–í–û–†–ê:</strong><br/>'
    html += f'<strong>–ó–∞–∫–∞–∑—á–∏–∫:</strong> {form_data.get("customerName", "")}<br/>'
    if form_data.get('customerRepresentative'):
        html += f'–≤ –ª–∏—Ü–µ {form_data["customerRepresentative"]}<br/>'
    html += f'<strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> {form_data.get("companyName", "")}<br/>'
    if form_data.get('supplierRepresentative'):
        html += f'–≤ –ª–∏—Ü–µ {form_data["supplierRepresentative"]}'
    html += '</div>'
    
    # –ü—Ä–µ–¥–º–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞
    if form_data.get('contractSubject'):
        html += f'<div style="margin-bottom: 15px;"><strong>–ü–†–ï–î–ú–ï–¢ –î–û–ì–û–í–û–†–ê:</strong><br/>{form_data["contractSubject"]}</div>'
    
    return html

def generate_items_table(items, document_type):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤"""
    if not items:
        return ""
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    if document_type == 'invoice':
        headers = ['‚Ññ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª-–≤–æ', '–ï–¥.–∏–∑–º.', '–¶–µ–Ω–∞', '–°—É–º–º–∞']
    else:
        headers = ['‚Ññ', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ï–¥.–∏–∑–º.', '–¶–µ–Ω–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è']
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    html = '<h3 style="color: #34495e; margin: 30px 0 15px 0; font-size: 16px; font-weight: bold;">–¢–û–í–ê–†–´ –ò –£–°–õ–£–ì–ò</h3>'
    html += '<table style="width: 100%; border-collapse: collapse; margin-top: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">'
    html += '<thead><tr style="background-color: #34495e; color: white;">'
    for header in headers:
        html += f'<th style="border: 1px solid #dee2e6; padding: 12px; text-align: center; font-weight: bold; font-size: 11px;">{header}</th>'
    html += '</tr></thead><tbody>'
    
    total_sum = 0
    for i, item in enumerate(items, 1):
        if document_type == 'invoice':
            item_sum = item.get('quantity', 0) * item.get('price', 0)
            total_sum += item_sum
            row_bg = '#f8f9fa' if i % 2 == 0 else 'white'
            html += f'''
            <tr style="background-color: {row_bg};">
                <td style="border: 1px solid #dee2e6; padding: 10px; text-align: center; color: #2c3e50; font-size: 10px;">{i}</td>
                <td style="border: 1px solid #dee2e6; padding: 10px; color: #2c3e50; font-size: 10px;">{item.get('name', '')}</td>
                <td style="border: 1px solid #dee2e6; padding: 10px; text-align: center; color: #2c3e50; font-size: 10px;">{item.get('quantity', 0)}</td>
                <td style="border: 1px solid #dee2e6; padding: 10px; text-align: center; color: #2c3e50; font-size: 10px;">{item.get('unit', '')}</td>
                <td style="border: 1px solid #dee2e6; padding: 10px; text-align: center; color: #2c3e50; font-size: 10px;">{item.get('price', 0):.2f}</td>
                <td style="border: 1px solid #dee2e6; padding: 10px; text-align: center; color: #2c3e50; font-size: 10px;">{item_sum:.2f}</td>
            </tr>
            '''
        else:
            row_bg = '#f8f9fa' if i % 2 == 0 else 'white'
            html += f'''
            <tr style="background-color: {row_bg};">
                <td style="border: 1px solid #dee2e6; padding: 10px; text-align: center; color: #2c3e50; font-size: 10px;">{i}</td>
                <td style="border: 1px solid #dee2e6; padding: 10px; color: #2c3e50; font-size: 10px;">{item.get('name', '')}</td>
                <td style="border: 1px solid #dee2e6; padding: 10px; color: #2c3e50; font-size: 10px;">{item.get('description', '')}</td>
                <td style="border: 1px solid #dee2e6; padding: 10px; text-align: center; color: #2c3e50; font-size: 10px;">{item.get('unit', '')}</td>
                <td style="border: 1px solid #dee2e6; padding: 10px; text-align: center; color: #2c3e50; font-size: 10px;">{item.get('price', 0):.2f}</td>
                <td style="border: 1px solid #dee2e6; padding: 10px; color: #2c3e50; font-size: 10px;">{item.get('category', '')}</td>
            </tr>
            '''
    
    # –ò—Ç–æ–≥–æ –¥–ª—è —Å—á–µ—Ç–æ–≤
    if document_type == 'invoice' and total_sum > 0:
        html += f'''
        <tr style="background-color: #e9ecef;">
            <td colspan="5" style="border: 1px solid #dee2e6; padding: 12px; text-align: right; font-weight: bold; color: #2c3e50; font-size: 11px;">–ò–¢–û–ì–û:</td>
            <td style="border: 1px solid #dee2e6; padding: 12px; text-align: center; font-weight: bold; color: #2c3e50; font-size: 11px;">{total_sum:.2f}</td>
        </tr>
        '''
    
    html += '</tbody></table>'
    return html

